# -*- coding: utf-8 -*-

"""
Please don't do any changes to this file
"""

from collections import namedtuple
try:
    from util.utili18n import le2mtrans
except AttributeError:
    le2mtrans = lambda x: x

Experiment = namedtuple(
    "Experiment",
    "parts dirbase basename istest")

YES_NO = {
    0: le2mtrans(u"Yes"),
    1: le2mtrans(u"No")
}

MALE_FEMALE = {
    0: le2mtrans(u"Male"),
    1: le2mtrans(u"Female")
}

NATIONALITES = [
    u"Choisir", u"Afghan", u"Albanais", u"Algérien", u"Allemand",
    u"Américain", u"Angolais", u"Argentin", u"Arménien", u"Australien",
    u"Autrichien", u"Bangladais", u"Belge", u"Béninois", u"Bosniaque",
    u"Botswanais", u"Bhoutan", u"Brésilien", u"Britannique", u"Bulgare",
    u"Burkinabè", u"Cambodgien", u"Camerounais", u"Canadien", u"Chilien",
    u"Chinois", u"Colombien", u"Congolais", u"Cubain", u"Danois", u"Ecossais",
    u"Egyptien", u"Espagnol", u"Estonien", u"Européen", u"Finlandais",
    u"Français", u"Gabonais", u"Georgien", u"Grec", u"Guinéen", u"Haïtien",
    u"Hollandais", u"Hong-Kong", u"Hongrois", u"Indien", u"Indonésien",
    u"Irakien", u"Iranien", u"Irlandais", u"Islandais", u"Israélien",
    u"Italien", u"Ivoirien", u"Jamaïcain", u"Japonais", u"Kazakh", u"Kirghiz",
    u"Kurde", u"Letton", u"Libanais", u"Liechtenstein", u"Lituanien",
    u"Luxembourgeois", u"Macédonien", u"Madagascar", u"Malaisien", u"Malien",
    u"Maltais", u"Marocain", u"Mauritanien", u"Mauricien", u"Mexicain",
    u"Monégasque", u"Mongol", u"Néo-Zélandais", u"Nigérien", u"Nord Coréen",
    u"Norvégien", u"Pakistanais", u"Palestinien", u"Péruvien", u"Philippins",
    u"Polonais", u"Portoricain", u"Portugais", u"Roumain", u"Russe",
    u"Sénégalais", u"Serbe", u"Serbo-croate", u"Singapour", u"Slovaque",
    u"Soviétique", u"Sri-lankais", u"Sud-Africain", u"Sud-Coréen", u"Suédois",
    u"Suisse", u"Syrien", u"Tadjik", u"Taïwanais", u"Tchadien", u"Tchèque",
    u"Thaïlandais", u"Tunisien", u"Turc", u"Ukrainien", u"Uruguayen",
    u"Vénézuélien", u"Vietnamien", u"Autre"
]

ETUDES_DISCIPLINES = {
    1: u'AES',
    2: le2mtrans(u'Archeology'),
    3: le2mtrans(u'Biology'),
    4: le2mtrans(u'Chemistry'),
    5: le2mtrans(u'Law'),
    6: u'Ecole de commerce',
    7: u"Ecole d'infirmière",
    8: u"Ecole d'ingénieur",
    9: le2mtrans(u'Economics'),
    10: le2mtrans(u'Geography'),
    11: le2mtrans(u'History'),
    12: le2mtrans(u'Informatics'),
    13: u'IAE',
    14: u'IPAG',
    15: u'ISEM',
    16: le2mtrans(u'Letters'),
    17: le2mtrans(u'Mathematics'),
    18: le2mtrans(u'Medicine'),
    19: le2mtrans(u'Music'),
    20: le2mtrans(u'Pharmacy'),
    21: le2mtrans(u'Philosophy'),
    22: le2mtrans(u'Physics'),
    23: le2mtrans(u'Political Science'),
    24: le2mtrans(u"Educational Sciences"),
    25: le2mtrans(u'Sociology'),
    26: le2mtrans(u'Sport'),
    27: u'SupAgro'
 }


ETUDES_ANNEES = {
    1: le2mtrans(u'Bachelor') + u' 1',
    2: le2mtrans(u'Bachelor') + u' 2',
    3: le2mtrans(u'Bachelor') + u' 3',
    4: le2mtrans(u'Master') + u' 1',
    5: le2mtrans(u'Master') + u' 2',
    6: le2mtrans(u'PhD'),
}


COUNTRIES = {
    1: u'Afghanistan',
    2: u'\xc5land Islands',
    3: u'Albania',
    4: u'Algeria',
    5: u'American Samoa',
    6: u'Andorra',
    7: u'Angola',
    8: u'Anguilla',
    9: u'Antarctica',
    10: u'Antigua and Barbuda',
    11: u'Argentina',
    12: u'Armenia',
    13: u'Aruba',
    14: u'Australia',
    15: u'Austria',
    16: u'Azerbaijan',
    17: u'Bahamas',
    18: u'Bahrain',
    19: u'Bangladesh',
    20: u'Barbados',
    21: u'Belarus',
    22: u'Belgium',
    23: u'Belize',
    24: u'Benin',
    25: u'Bermuda',
    26: u'Bhutan',
    27: u'Bolivia, Plurinational State of',
    28: u'Bonaire, Sint Eustatius and Saba',
    29: u'Bosnia and Herzegovina',
    30: u'Botswana',
    31: u'Bouvet Island',
    32: u'Brazil',
    33: u'British Indian Ocean Territory',
    34: u'Brunei Darussalam',
    35: u'Bulgaria',
    36: u'Burkina Faso',
    37: u'Burundi',
    38: u'Cambodia',
    39: u'Cameroon',
    40: u'Canada',
    41: u'Cape Verde',
    42: u'Cayman Islands',
    43: u'Central African Republic',
    44: u'Chad',
    45: u'Chile',
    46: u'China',
    47: u'Christmas Island',
    48: u'Cocos (Keeling) Islands',
    49: u'Colombia',
    50: u'Comoros',
    51: u'Congo',
    52: u'Congo, The Democratic Republic of the',
    53: u'Cook Islands',
    54: u'Costa Rica',
    55: u"C\xf4te d'Ivoire",
    56: u'Croatia',
    57: u'Cuba',
    58: u'Cura\xe7ao',
    59: u'Cyprus',
    60: u'Czech Republic',
    61: u'Denmark',
    62: u'Djibouti',
    63: u'Dominica',
    64: u'Dominican Republic',
    65: u'Ecuador',
    66: u'Egypt',
    67: u'El Salvador',
    68: u'Equatorial Guinea',
    69: u'Eritrea',
    70: u'Estonia',
    71: u'Ethiopia',
    72: u'Falkland Islands (Malvinas)',
    73: u'Faroe Islands',
    74: u'Fiji',
    75: u'Finland',
    76: u'France',
    77: u'French Guiana',
    78: u'French Polynesia',
    79: u'French Southern Territories',
    80: u'Gabon',
    81: u'Gambia',
    82: u'Georgia',
    83: u'Germany',
    84: u'Ghana',
    85: u'Gibraltar',
    86: u'Greece',
    87: u'Greenland',
    88: u'Grenada',
    89: u'Guadeloupe',
    90: u'Guam',
    91: u'Guatemala',
    92: u'Guernsey',
    93: u'Guinea',
    94: u'Guinea-Bissau',
    95: u'Guyana',
    96: u'Haiti',
    97: u'Heard Island and McDonald Islands',
    98: u'Holy See (Vatican City State)',
    99: u'Honduras',
    100: u'Hong Kong',
    101: u'Hungary',
    102: u'Iceland',
    103: u'India',
    104: u'Indonesia',
    105: u'Iran, Islamic Republic of',
    106: u'Iraq',
    107: u'Ireland',
    108: u'Isle of Man',
    109: u'Israel',
    110: u'Italy',
    111: u'Jamaica',
    112: u'Japan',
    113: u'Jersey',
    114: u'Jordan',
    115: u'Kazakhstan',
    116: u'Kenya',
    117: u'Kiribati',
    118: u"Korea, Democratic People's Republic of",
    119: u'Korea, Republic of',
    120: u'Kuwait',
    121: u'Kyrgyzstan',
    122: u"Lao People's Democratic Republic",
    123: u'Latvia',
    124: u'Lebanon',
    125: u'Lesotho',
    126: u'Liberia',
    127: u'Libya',
    128: u'Liechtenstein',
    129: u'Lithuania',
    130: u'Luxembourg',
    131: u'Macao',
    132: u'Macedonia, Republic of',
    133: u'Madagascar',
    134: u'Malawi',
    135: u'Malaysia',
    136: u'Maldives',
    137: u'Mali',
    138: u'Malta',
    139: u'Marshall Islands',
    140: u'Martinique',
    141: u'Mauritania',
    142: u'Mauritius',
    143: u'Mayotte',
    144: u'Mexico',
    145: u'Micronesia, Federated States of',
    146: u'Moldova, Republic of',
    147: u'Monaco',
    148: u'Mongolia',
    149: u'Montenegro',
    150: u'Montserrat',
    151: u'Morocco',
    152: u'Mozambique',
    153: u'Myanmar',
    154: u'Namibia',
    155: u'Nauru',
    156: u'Nepal',
    157: u'Netherlands',
    158: u'New Caledonia',
    159: u'New Zealand',
    160: u'Nicaragua',
    161: u'Niger',
    162: u'Nigeria',
    163: u'Niue',
    164: u'Norfolk Island',
    165: u'Northern Mariana Islands',
    166: u'Norway',
    167: u'Oman',
    168: u'Pakistan',
    169: u'Palau',
    170: u'Palestine, State of',
    171: u'Panama',
    172: u'Papua New Guinea',
    173: u'Paraguay',
    174: u'Peru',
    175: u'Philippines',
    176: u'Pitcairn',
    177: u'Poland',
    178: u'Portugal',
    179: u'Puerto Rico',
    180: u'Qatar',
    181: u'R\xe9union',
    182: u'Romania',
    183: u'Russian Federation',
    184: u'Rwanda',
    185: u'Saint Barth\xe9lemy',
    186: u'Saint Helena, Ascension and Tristan da Cunha',
    187: u'Saint Kitts and Nevis',
    188: u'Saint Lucia',
    189: u'Saint Martin (French part)',
    190: u'Saint Pierre and Miquelon',
    191: u'Saint Vincent and the Grenadines',
    192: u'Samoa',
    193: u'San Marino',
    194: u'Sao Tome and Principe',
    195: u'Saudi Arabia',
    196: u'Senegal',
    197: u'Serbia',
    198: u'Seychelles',
    199: u'Sierra Leone',
    200: u'Singapore',
    201: u'Sint Maarten (Dutch part)',
    202: u'Slovakia',
    203: u'Slovenia',
    204: u'Solomon Islands',
    205: u'Somalia',
    206: u'South Africa',
    207: u'South Georgia and the South Sandwich Islands',
    208: u'Spain',
    209: u'Sri Lanka',
    210: u'Sudan',
    211: u'Suriname',
    212: u'South Sudan',
    213: u'Svalbard and Jan Mayen',
    214: u'Swaziland',
    215: u'Sweden',
    216: u'Switzerland',
    217: u'Syrian Arab Republic',
    218: u'Taiwan, Province of China',
    219: u'Tajikistan',
    220: u'Tanzania, United Republic of',
    221: u'Thailand',
    222: u'Timor-Leste',
    223: u'Togo',
    224: u'Tokelau',
    225: u'Tonga',
    226: u'Trinidad and Tobago',
    227: u'Tunisia',
    228: u'Turkey',
    229: u'Turkmenistan',
    230: u'Turks and Caicos Islands',
    231: u'Tuvalu',
    232: u'Uganda',
    233: u'Ukraine',
    234: u'United Arab Emirates',
    235: u'United Kingdom',
    236: u'United States',
    237: u'United States Minor Outlying Islands',
    238: u'Uruguay',
    239: u'Uzbekistan',
    240: u'Vanuatu',
    241: u'Venezuela, Bolivarian Republic of',
    242: u'Viet Nam',
    243: u'Virgin Islands, British',
    244: u'Virgin Islands, U.S.',
    245: u'Wallis and Futuna',
    246: u'Western Sahara',
    247: u'Yemen',
    248: u'Zambia',
    249: u'Zimbabwe'
}

SPORT_LEVELS = {
    1: le2mtrans(u"Departemental"),
    2: le2mtrans(u"Regional"),
    3: le2mtrans(u"National"),
    4: le2mtrans(u"International")
}


RELIGION_NAMES = {
    1: le2mtrans(u"Buddhist"),
    2: le2mtrans(u"Catholic"),
    3: le2mtrans(u"Hindu"),
    4: le2mtrans(u"Jewish"),
    5: le2mtrans(u"Muslim"),
    6: le2mtrans(u"Protestant"),
    7: le2mtrans(u"Unaffiliated"),
}


RELIGION_BELIEFS = {
    1: le2mtrans(u"Very religious"),
    2: le2mtrans(u"Somewhat religious"),
    3: le2mtrans(u"Not too religious"),
    4: le2mtrans(u"Not at all religious")
}

IMPORTANT_LEVELS = {
    1: le2mtrans(u"Very important"),
    2: le2mtrans(u"Somewhat important"),
    3: le2mtrans(u"Not too important"),
    4: le2mtrans(u"Not at all important")
}


def get_code_or_name_paired(a_dict, code_or_name):
    if type(a_dict) is not dict:
        raise ValueError(le2mtrans(u"A dict is expected"))

    if type(code_or_name) is int:
        return a_dict.get(code_or_name, None)
    elif type(code_or_name) is str:
        for k, v in a_dict.viewitems():
            if v == code_or_name:
                return k
    else:
        return None